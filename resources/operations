OPERATIONS:

PC: La position actuelle du processus

Octet de codage: Octet qui donne la taille des Arguments
0b00:?
0b01:T_REG
0b10:T_IND
0b11:t_DIR

T_DIR: Valeur statique
T_REG: Adresse registre
T_LAB: Non utilisé ?? Label?
T_IND: Adresse memoire d'une fonction du fichier

live:
	code: 0x01
	arg: T_DIR
	note: l'argument ne sert à rien

ld:
	code: 0x02
	arg: T_DIR | T_IND, T_REG
	note: stocke la valeur du premier argument dans le registre modulo IDX_MOD donné par
		le deuxieme argument

st:
	code: 0x03
	arg: T_REG, T_IND | T_REG
	note: stocke la valeur du premier argument dans l'adresse
		PC + (deuxieme parametre % IDX_MOD)

add:
	code: 0x04
	arg: T_REG, T_REG, T_REG
	note: stocke le resultat de l'addition des deux premiers arguments
		dans le troisieme

sub:
	code: 0x05
	arg: T_REG, T_REG, T_REG
	note: stocke le resultat de la soustraction des deux premiers arguments
		dans le troisieme

and:
	code: 0x06
	arg: T_REG | T_DIR | T_IND, T_REG | T_IND | T_DIR, T_REG
	note: stocke le résultat d'un & binaire des deux premiers arguments
		dans le dernier

or:
	code: 0x07
	arg: T_REG | T_IND | T_DIR, T_REG | T_IND | T_DIR, T_REG
	note stocke le résultat d'un | binaire des deux premiers arguments
		dans le dernier

xor:
	code: 0x08
	arg: T_REG | T_IND | T_DIR, T_REG | T_IND | T_DIR, T_REG
	note stocke le résultat d'un ^ binaire des deux premiers arguments
		dans le dernier

zjmp:
	code: 0x09
	arg: T_IND
	note: saute à l'index demandé SI carry est à 1

ldi:
	code: 0x0a
	arg: T_REG | T_DIR | T_IND, T_DIR | T_REG, T_REG
	note: additionne le resultat des deux premiers arguments,
		lis la valeur a l'adresse pointée par cette addition modulo IDX_MOD
		et la stocke dans le troisieme argument (sous la taille adéquate REG_SIZE)

sti:
	code: 0x0b
	arg: T_REG, T_REG | T_DIR | T_IND, T_DIR | T_REG
	note: stocke le premier arguments dans l'adresse créée
		en additionnant les deux derniers arguments

fork:
	code: 0x0c
	arg: T_IND
	note: créé un processus enfant avec les memes caracteristiques que le parent
		sauf le PC qui est mis a PC + (premier argument % IDX_MOD),
		ce processus devra etre executé comme les autres a chaque cycle

lld:
	code: 0x0d
	note: stocke la valeur du premier argument dans le registre donné par
		le deuxieme argument

lldi:
	code: 0x0e
	arg: T_REG | T_DIR | T_IND, T_DIR | T_REG, T_REG
	note: additionne le resultat des deux premiers arguments,
		lis la valeur a l'adresse pointée par cette addition et la stocke
		dans le troisieme argument (sous la taille adéquate REG_SIZE) + modifie le carry (?)

lfork:
	code: 0x0f
	arg: T_DIR
	note: créé un processus enfant avec les memes caracteristiques que le parent
		sauf le PC qui est mis a PC + premier argument,
		ce processus devra etre executé comme les autres a chaque cycle

aff:
	code: 0x10
	arg: T_REG
	note: affiche l'octet pointé par le premier argument % 256
